---
// TabUrls.astro
---

<!-- Gesti√≥n de URLs -->
<div class="w-full bg-white border border-gray-200 shadow-lg rounded-lg p-8 space-y-6">
  <h1 class="text-2xl font-bold text-center text-gray-800">Gesti√≥n de URLs confiables</h1>

  <form id="form-urls-confiables" class="space-y-4">
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-1">Nueva URL</label>
      <input 
        type="url" 
        name="nueva_url" 
        placeholder="https://ejemplo.com/rss" 
        class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
        required
      />
      <p class="text-xs text-gray-500 mt-1">Ingresa una URL RSS v√°lida</p>
    </div>

    <div>
      <label class="block text-sm font-medium text-gray-700 mb-1">¬øQu√© configuraci√≥n aplicar?</label>
      <select 
        name="configuracion_url" 
        class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        id="select-configuracion"
        required
      >
        <option value="">Seleccionar configuraci√≥n...</option>
      </select>
    </div>

    <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-3">
      <h3 class="text-sm font-semibold text-gray-700 border-b border-gray-200 pb-2">
        Vista previa de la configuraci√≥n seleccionada
      </h3>
      <div class="grid grid-cols-2 gap-3 text-sm">
        <div>
          <span class="text-gray-600">üè∑Ô∏è Hashtags:</span>
          <span class="ml-2 font-medium text-gray-800" id="config-hashtags">No especificados</span>
        </div>
        <div>
          <span class="text-gray-600">üéØ Tono:</span>
          <span class="ml-2 font-medium text-gray-800" id="config-tono">No especificado</span>
        </div>
        <div>
          <span class="text-gray-600">üìä Profundidad:</span>
          <span class="ml-2 font-medium text-gray-800" id="config-profundidad">No especificada</span>
        </div>
        <div>
          <span class="text-gray-600">‚ö° Acci√≥n:</span>
          <span class="ml-2 font-medium text-gray-800" id="config-accion">No especificada</span>
        </div>
      </div>
    </div>

    <div class="text-center">
      <button 
        type="submit" 
        id="btn-guardar-url"  
        class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-full border-2 border-blue-500 text-sm font-medium transition disabled:opacity-50"
      >
        + Asociar URL a Configuraci√≥n
      </button>
    </div>
  </form>

  <div class="mt-8">
    <h2 class="text-lg font-semibold text-gray-800 mb-4"> URLs Configuradas</h2>
    <p class="text-sm text-gray-600 mb-4">Gestiona tus fuentes de noticias y sus configuraciones asociadas</p>
    <div id="lista-urls" class="space-y-2">
      <div class="text-center text-gray-500">Cargando URLs...</div>
    </div>
  </div>
</div>

<!-- Modal para editar URL -->
<div id="modal-editar-url" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" onclick="cerrarModalUrl()">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full p-6" onclick="event.stopPropagation()">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-bold text-gray-800">Editar URL</h2>
        <button onclick="cerrarModalUrl()" class="text-gray-500 hover:text-gray-700">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <form id="form-editar-url" class="space-y-4">
        <input type="hidden" id="url-id-edit" name="urlId" />
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Nombre</label>
          <input 
            type="text" 
            id="url-nombre-edit" 
            name="nombre" 
            class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            required
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">URL</label>
          <input 
            type="url" 
            id="url-url-edit" 
            name="url" 
            class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            required
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Descripci√≥n</label>
          <textarea 
            id="url-descripcion-edit" 
            name="descripcion" 
            rows="3"
            class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          ></textarea>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Configuraciones asociadas</label>
          
          <!-- Select para a√±adir nuevas configuraciones -->
          <div class="mb-3">
            <select 
              id="select-nueva-configuracion" 
              class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">Seleccionar configuraci√≥n para a√±adir...</option>
            </select>
            <button 
              type="button" 
              onclick="a√±adirConfiguracion()" 
              class="mt-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm rounded-full border-2 border-green-500"
            >
              + A√±adir
            </button>
          </div>
          
          <!-- Tags de configuraciones asociadas -->
          <div id="configuraciones-tags" class="flex flex-wrap gap-2 min-h-[40px] p-3 border border-gray-300 rounded-md bg-gray-50">
            <span class="text-sm text-gray-500">No hay configuraciones asociadas</span>
          </div>
        </div>

        <div class="flex items-center">
          <input type="checkbox" id="url-activa-edit" name="activa" class="w-5 h-5 text-blue-600 bg-white border-2 border-gray-400 rounded-md focus:ring-blue-500 focus:ring-2 mr-3 checked:bg-blue-600 checked:border-blue-600">
          <label for="url-activa-edit" class="text-sm font-medium text-gray-700">URL activa</label>
        </div>

        <div class="flex gap-4 pt-4">
          <button 
            type="submit" 
            class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-full border-2 border-blue-500 text-sm font-medium transition"
          >
            üíæ Actualizar URL
          </button>
          <button 
            type="button" 
            onclick="cerrarModalUrl()" 
            class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-full border-2 border-gray-400 text-sm font-medium transition"
          >
            Cancelar
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  // Variables globales
  let usuarioId = null; // Se asignar√° din√°micamente
  
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Inicializando TabUrls...');
    
    // Funci√≥n para intentar obtener el usuario con reintentos
    function obtenerUsuarioConReintentos(maxIntentos = 5, intervalo = 1000) {
      return new Promise((resolve, reject) => {
        let intentos = 0;
        
        function intentar() {
          intentos++;
          console.log(`üîç Intento ${intentos} de obtener usuario autenticado...`);
          
          // Verificar si las funciones globales est√°n disponibles
          if (typeof window.getCurrentUserId !== 'function') {
            console.log('‚è≥ Funciones de auth a√∫n no disponibles...');
            if (intentos < maxIntentos) {
              setTimeout(intentar, intervalo);
              return;
            } else {
              reject(new Error('Funciones de autenticaci√≥n no disponibles'));
              return;
            }
          }
          
          usuarioId = window.getCurrentUserId();
          
          if (usuarioId) {
            console.log(` Usuario autenticado obtenido: ${usuarioId}`);
            resolve(usuarioId);
          } else {
            console.log('‚è≥ Usuario a√∫n no disponible...');
            if (intentos < maxIntentos) {
              setTimeout(intentar, intervalo);
            } else {
              reject(new Error('No se pudo obtener el ID del usuario'));
            }
          }
        }
        
        intentar();
      });
    }
    
    // Inicializar solo cuando tengamos el usuario
    obtenerUsuarioConReintentos()
      .then((id) => {
        usuarioId = id;
        console.log('üöÄ Inicializando URLs con usuario:', usuarioId);
        
        // Solo ejecutar si estamos en la pesta√±a de URLs
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('tab') === 'urls') {
          cargarConfiguracionesParaSelect();
          cargarUrlsConfiables();
          configurarVistaPrevia();
          configurarFormularioUrls();
        }
      })
      .catch((error) => {
        console.error(' Error inicializando URLs:', error);
        // Redirigir al login si no se puede obtener el usuario
        window.location.href = '/login';
      });
  });

  async function cargarConfiguracionesParaSelect() {
    try {
      const response = await fetch(`https://localhost:7298/api/configuracion/obtener/${usuarioId}`); // Usar ID din√°mico
      const data = await response.json();
      
      if (data.success && data.data) {
        const configuraciones = Array.isArray(data.data) ? data.data : [data.data];
        const select = document.getElementById('select-configuracion');
        
        if (select) {
          select.innerHTML = '<option value="">Seleccionar configuraci√≥n...</option>';
          
          configuraciones.forEach(config => {
            const option = document.createElement('option');
            option.value = config.id;
            option.textContent = `${config.hashtags || 'Sin hashtags'} (${config.frecuencia || 'diaria'})`;
            option.dataset.config = JSON.stringify(config);
            select.appendChild(option);
          });
        }
      }
    } catch (error) {
      console.error('Error cargando configuraciones:', error);
    }
  }

  async function cargarUrlsConfiables() {
    try {
      const response = await fetch(`https://localhost:7298/api/urlsconfiables/usuario/${usuarioId}`);
      const result = await response.json();
      
      if (result.success && result.data) {
        mostrarUrls(result.data);
      } else {
        document.getElementById('lista-urls').innerHTML = '<div class="text-center text-gray-500">No hay URLs configuradas</div>';
      }
    } catch (error) {
      console.error('Error cargando URLs:', error);
      document.getElementById('lista-urls').innerHTML = '<div class="text-center text-red-500">Error al cargar URLs</div>';
    }
  }

  function mostrarUrls(urls) {
    const container = document.getElementById('lista-urls');
    if (!container || urls.length === 0) {
      container.innerHTML = '<div class="text-center text-gray-500">No hay URLs configuradas</div>';
      return;
    }

    container.innerHTML = urls.map(urlConfig => `
      <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <div class="flex justify-between items-start mb-2">
          <div class="flex-1">
            <h3 class="font-medium text-blue-600">${urlConfig.nombre || 'URL sin nombre'}</h3>
            <p class="text-sm text-gray-600 break-all">${urlConfig.url}</p>
            <p class="text-xs text-gray-500 mt-1">
              ${urlConfig.tipoFuente || 'RSS'} ‚Ä¢ ${urlConfig.activa ? 'Activa' : 'Inactiva'}
            </p>
          </div>
          <div class="flex space-x-2">
            <button 
              onclick="editarUrl(${urlConfig.id})" 
              class="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded-full border-2 border-blue-300 ml-2"
            >
              Editar
            </button>
            <button 
              onclick="eliminarUrl(${urlConfig.id})" 
              class="px-3 py-1 text-sm bg-red-100 text-red-700 rounded-full border-2 border-red-300"
            >
              Eliminar
            </button>
          </div>
        </div>
        
        ${urlConfig.configuraciones && urlConfig.configuraciones.length > 0 ? `
          <div class="mt-3 pt-3 border-t border-gray-200">
            <p class="text-xs font-medium text-gray-700 mb-2">Configuraciones asociadas:</p>
            <div class="flex flex-wrap gap-2">
              ${urlConfig.configuraciones.map(config => `
                <span class="inline-flex items-center px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded">
                  ${config.hashtags || 'Sin hashtags'}
                  <button 
                    onclick="eliminarAsociacion(${urlConfig.id}, ${config.id})"
                    class="ml-1 text-blue-600 hover:text-blue-800"
                    title="Eliminar esta asociaci√≥n"
                  >
                    √ó
                  </button>
                </span>
              `).join('')}
            </div>
          </div>
        ` : '<p class="text-xs text-gray-500 mt-2">Sin configuraciones asociadas</p>'}
      </div>
    `).join('');
  }

  function configurarVistaPrevia() {
    const select = document.getElementById('select-configuracion');
    if (!select) return;

    select.addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      
      if (selectedOption.value && selectedOption.dataset.config) {
        try {
          const config = JSON.parse(selectedOption.dataset.config);
          
          document.getElementById('config-hashtags').textContent = config.hashtags || 'No especificados';
          document.getElementById('config-tono').textContent = config.tonoResumen || 'No especificado';
          document.getElementById('config-profundidad').textContent = config.profundidadResumen || 'No especificada';
          document.getElementById('config-accion').textContent = config.accionResumen || 'No especificada';
        } catch (error) {
          console.error('Error parseando configuraci√≥n:', error);
        }
      } else {
        document.getElementById('config-hashtags').textContent = 'No especificados';
        document.getElementById('config-tono').textContent = 'No especificado';
        document.getElementById('config-profundidad').textContent = 'No especificada';
        document.getElementById('config-accion').textContent = 'No especificada';
      }
    });
  }

  function configurarFormularioUrls() {
    const form = document.getElementById('form-urls-confiables');
    if (!form) return;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const nuevaUrl = formData.get('nueva_url');
      const configuracionId = formData.get('configuracion_url');

      if (!nuevaUrl || nuevaUrl.trim() === '') {
        alert('Por favor, ingresa una URL v√°lida');
        return;
      }

      if (!configuracionId || configuracionId === '') {
        alert('Por favor, selecciona una configuraci√≥n');
        return;
      }

      try {
        new URL(nuevaUrl);
      } catch (error) {
        alert('Por favor, ingresa una URL v√°lida (debe incluir http:// o https://)');
        return;
      }

      const urlData = {
        usuarioId: usuarioId,
        url: nuevaUrl.trim(),
        configuracionId: parseInt(configuracionId)
      };

      try {
        const response = await fetch('https://localhost:7298/api/urlsconfiables', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(urlData)
        });

        const data = await response.json();

        if (data.success) {
          alert(' URL a√±adida correctamente');
          e.target.reset();
          
          // Limpiar vista previa
          document.getElementById('config-hashtags').textContent = 'No especificados';
          document.getElementById('config-tono').textContent = 'No especificado';
          document.getElementById('config-profundidad').textContent = 'No especificada';
          document.getElementById('config-accion').textContent = 'No especificada';
          
          cargarUrlsConfiables();
        } else {
          alert(' Error: ' + (data.message || 'Error desconocido'));
        }
      } catch (error) {
        console.error('Error al guardar URL:', error);
        alert('Error de conexi√≥n. Verifica que el backend est√© ejecut√°ndose.');
      }
    });
  }

  // Funciones globales para botones (usando usuarioId din√°mico)
  window.eliminarUrl = async (id) => {
    try {
      const deleteResponse = await fetch(`https://localhost:7298/api/urlsconfiables/${id}`, {
        method: 'DELETE'
      });
      
      const data = await deleteResponse.json();
      
      if (deleteResponse.ok) {
        alert(' URL eliminada correctamente');
        cargarUrlsConfiables();
      } else if (data.tipo === 'multiples_configuraciones') {
        const numAsociaciones = data.configuraciones?.length || 0;
        const configuracionesTexto = data.configuraciones
          ?.map(c => `‚Ä¢ ${c.hashtags || 'Sin hashtags'}`)
          .join('\n') || '';
        
        const mensaje = `Esta URL est√° asociada a ${numAsociaciones} configuraci√≥n(es):\n\n${configuracionesTexto}\n\nSi contin√∫as, se eliminar√°n TODAS las asociaciones y la URL.\n\n¬øContinuar?`;
        
        if (confirm(mensaje)) {
          if (data.configuraciones) {
            for (const config of data.configuraciones) {
              try {
                await fetch(`https://localhost:7298/api/urlsconfiables/${id}/configuracion/${config.id}`, {
                  method: 'DELETE'
                });
              } catch (error) {
                console.warn(`Error eliminando asociaci√≥n ${config.id}:`, error);
              }
            }
          }
          
          const finalResponse = await fetch(`https://localhost:7298/api/urlsconfiables/${id}`, {
            method: 'DELETE'
          });
          
          if (finalResponse.ok) {
            alert(' URL y todas sus asociaciones eliminadas correctamente');
            cargarUrlsConfiables();
          } else {
            alert(' Error al eliminar la URL despu√©s de eliminar asociaciones');
          }
        }
      } else {
        alert(' Error: ' + (data.message || 'Error desconocido'));
      }
    } catch (error) {
      alert('Error de conexi√≥n: ' + error.message);
    }
  };

  window.editarUrl = async (id) => {
    try {
      const response = await fetch(`https://localhost:7298/api/urlsconfiables/${id}`);
      const data = await response.json();
      
      if (data.success && data.data) {
        const url = data.data;
        
        window.currentUrlId = id;
        window.configuracionesActuales = [];
        
        document.getElementById('url-id-edit').value = url.id;
        document.getElementById('url-nombre-edit').value = url.nombre || '';
        document.getElementById('url-url-edit').value = url.url || '';
        document.getElementById('url-descripcion-edit').value = url.descripcion || '';
        document.getElementById('url-activa-edit').checked = url.activa;
        
        await cargarConfiguracionesParaModal();
        await cargarConfiguracionesAsociadas(id);
        
        document.getElementById('modal-editar-url').classList.remove('hidden');
      }
    } catch (error) {
      alert('Error al cargar los datos de la URL');
    }
  };

  async function cargarConfiguracionesParaModal() {
    try {
      const response = await fetch(`https://localhost:7298/api/configuracion/obtener/${usuarioId}`);
      const data = await response.json();
      
      if (data.success && data.data) {
        const configuraciones = Array.isArray(data.data) ? data.data : [data.data];
        window.todasLasConfiguraciones = configuraciones;
        
        actualizarSelectConfiguraciones();
      }
    } catch (error) {
      console.error('Error cargando configuraciones para modal:', error);
    }
  }

  function actualizarSelectConfiguraciones() {
    const select = document.getElementById('select-nueva-configuracion');
    if (!select || !window.todasLasConfiguraciones) return;
    
    select.innerHTML = '<option value="">Seleccionar configuraci√≥n para a√±adir...</option>';
    
    const configuracionesDisponibles = window.todasLasConfiguraciones.filter(config => 
      !window.configuracionesActuales.some(actual => actual.id === config.id)
    );
    
    configuracionesDisponibles.forEach(config => {
      const option = document.createElement('option');
      option.value = config.id;
      option.textContent = `${config.hashtags || 'Sin hashtags'} (${config.frecuencia || 'diaria'})`;
      select.appendChild(option);
    });
  }

  async function cargarConfiguracionesAsociadas(urlId) {
    try {
      const response = await fetch(`https://localhost:7298/api/urlsconfiables/usuario/${usuarioId}`);
      const result = await response.json();
      
      if (result.success && result.data) {
        const urlConfig = result.data.find(u => u.id === urlId);
        
        if (urlConfig && urlConfig.configuraciones) {
          window.configuracionesActuales = urlConfig.configuraciones;
        } else {
          window.configuracionesActuales = [];
        }
        
        actualizarTagsConfiguraciones();
        actualizarSelectConfiguraciones();
      }
    } catch (error) {
      console.error('Error cargando configuraciones asociadas:', error);
      window.configuracionesActuales = [];
    }
  }

  function actualizarTagsConfiguraciones() {
    const container = document.getElementById('configuraciones-tags');
    if (!container) return;
    
    if (window.configuracionesActuales.length === 0) {
      container.innerHTML = '<span class="text-sm text-gray-500">No hay configuraciones asociadas</span>';
      return;
    }
    
    container.innerHTML = window.configuracionesActuales.map(config => `
      <span class="inline-flex items-center px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-full border border-blue-300">
        #${config.hashtags || 'Sin hashtags'}
        <button 
          type="button"
          onclick="eliminarConfiguracionTag(${config.id})"
          class="ml-2 text-blue-600 hover:text-blue-800 font-bold"
          title="Eliminar configuraci√≥n"
        >
          √ó
        </button>
      </span>
    `).join('');
  }

  window.a√±adirConfiguracion = () => {
    const select = document.getElementById('select-nueva-configuracion');
    const configId = parseInt(select.value);
    
    if (!configId) {
      alert('Selecciona una configuraci√≥n');
      return;
    }
    
    const config = window.todasLasConfiguraciones.find(c => c.id === configId);
    if (config) {
      window.configuracionesActuales.push(config);
      actualizarTagsConfiguraciones();
      actualizarSelectConfiguraciones();
    }
  };

  window.eliminarConfiguracionTag = (configId) => {
    window.configuracionesActuales = window.configuracionesActuales.filter(c => c.id !== configId);
    actualizarTagsConfiguraciones();
    actualizarSelectConfiguraciones();
  };

  window.cerrarModalUrl = () => {
    document.getElementById('modal-editar-url').classList.add('hidden');
  };

  // Configurar formulario de editar URL
  document.addEventListener('DOMContentLoaded', () => {
    const formEditarUrl = document.getElementById('form-editar-url');
    if (formEditarUrl) {
      formEditarUrl.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const urlId = formData.get('urlId');
        
        const data = {
          nombre: formData.get('nombre'),
          url: formData.get('url'),
          descripcion: formData.get('descripcion'),
          tipoFuente: 'RSS',
          activa: formData.has('activa')
        };

        try {
          console.log('Actualizando URL:', urlId, data);
          
          const response = await fetch(`https://localhost:7298/api/urlsconfiables/${urlId}`, {
            method: 'PUT',
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(data),
          });

          console.log('Respuesta del servidor:', response.status);

          if (!response.ok) {
            const errorText = await response.text();
            console.error('Error del servidor:', errorText);
            throw new Error(`Error ${response.status}: ${errorText}`);
          }

          const resultado = await response.json();
          console.log('Resultado:', resultado);
          
          if (resultado.success) {
            console.log('Gestionando configuraciones asociadas...');
            await gestionarConfiguracionesAsociadas(urlId);
            
            alert(' URL actualizada correctamente');
            window.cerrarModalUrl();
            cargarUrlsConfiables();
          } else {
            alert(' Error: ' + resultado.message);
          }
        } catch (error) {
          console.error('Error completo:', error);
          alert('Error de conexi√≥n: ' + error.message + '\n\nVerifica que el backend est√© ejecut√°ndose en puerto 7298.');
        }
      });
    }
  });

  async function gestionarConfiguracionesAsociadas(urlId) {
    try {
      console.log('Iniciando gesti√≥n de configuraciones para URL:', urlId);
      
      const response = await fetch(`https://localhost:7298/api/urlsconfiables/usuario/${usuarioId}`); // Usar ID din√°mico
      const result = await response.json();
      
      if (result.success && result.data) {
        const urlConfig = result.data.find(u => u.id == urlId);
        const configuracionesServidor = urlConfig?.configuraciones || [];
        
        console.log('Configuraciones en servidor:', configuracionesServidor.length);
        console.log('Configuraciones en UI:', window.configuracionesActuales.length);
        
        // Configuraciones que est√°n en el servidor pero no en la UI (eliminar)
        for (const configServidor of configuracionesServidor) {
          if (!window.configuracionesActuales.some(actual => actual.id === configServidor.id)) {
            console.log('Eliminando configuraci√≥n:', configServidor.id);
            try {
              await fetch(`https://localhost:7298/api/urlsconfiables/${urlId}/configuracion/${configServidor.id}`, {
                method: 'DELETE'
              });
            } catch (deleteError) {
              console.warn('Error eliminando configuraci√≥n:', deleteError);
            }
          }
        }
        
        // Configuraciones que est√°n en la UI pero no en el servidor (a√±adir)
        for (const configActual of window.configuracionesActuales) {
          if (!configuracionesServidor.some(servidor => servidor.id === configActual.id)) {
            console.log('A√±adiendo configuraci√≥n:', configActual.id);
            try {
              await fetch(`https://localhost:7298/api/urlsconfiables`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  usuarioId: usuarioId, // Usar ID din√°mico
                  url: document.getElementById('url-url-edit').value,
                  configuracionId: configActual.id
                })
              });
            } catch (addError) {
              console.warn('Error a√±adiendo configuraci√≥n:', addError);
            }
          }
        }
        
        console.log('Gesti√≥n de configuraciones completada');
      }
    } catch (error) {
      console.error('Error gestionando configuraciones asociadas:', error);
    }
  }

  window.eliminarAsociacion = async (urlId, configId) => {
    if (confirm('¬øEliminar la asociaci√≥n con esta configuraci√≥n?')) {
      try {
        const response = await fetch(`https://localhost:7298/api/urlsconfiables/${urlId}/configuracion/${configId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          alert('Asociaci√≥n eliminada correctamente');
          cargarUrlsConfiables();
        } else {
          alert('Error al eliminar asociaci√≥n');
        }
      } catch (error) {
        alert('Error de conexi√≥n: ' + error.message);
      }
    }
  };
</script>