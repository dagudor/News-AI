---
import BaseLayout from '../layouts/BaseLayout.astro';
export const prerender = false;
---

<BaseLayout title="Login - NewsAI">
  <section class="min-h-screen flex items-center justify-center bg-gray-50 px-6">
    <div class="max-w-md w-full">
      
      <!-- Header -->
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">NewsAI</h1>
        <p class="text-gray-600">Inicia sesión para continuar</p>
      </div>

      <!-- Formulario de Login -->
      <div class="bg-white border border-gray-200 shadow-lg rounded-lg p-8">
        
        <!-- Mensajes de estado -->
        <div id="mensaje-estado" class="hidden mb-4 p-3 rounded-md"></div>
        
        <form id="form-login" class="space-y-6">
          
          <!-- Campo Login -->
          <div>
            <label for="login" class="block text-sm font-medium text-gray-700 mb-2">
              Usuario
            </label>
            <input 
              type="text" 
              id="login"
              name="login" 
              placeholder="Introduce tu usuario"
              class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <!-- Campo Password -->
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700 mb-2">
              Contraseña
            </label>
            <input 
              type="password" 
              id="password"
              name="password" 
              placeholder="Introduce tu contraseña"
              class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <!-- Botón Submit -->
          <button 
            type="submit" 
            id="btn-login"
            class="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium"
          >
            <span id="texto-boton">Iniciar Sesión</span>
            <span id="spinner-boton" class="hidden">
              <svg class="animate-spin inline w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Iniciando...
            </span>
          </button>

        </form>

        <!-- Links adicionales -->
        <div class="mt-6 text-center">
          <p class="text-sm text-gray-600">
            ¿No tienes cuenta? 
            <a href="/registro" class="text-blue-600 hover:text-blue-700 font-medium">
              Regístrate aquí
            </a>
          </p>
        </div>

      </div>

      <!-- Info adicional -->
      <div class="mt-6 text-center">
        <p class="text-xs text-gray-500">
          NewsAI
        </p>
      </div>

    </div>
  </section>

  <script>
    // Estado de la aplicación
    let isLoading = false;

    // Función para mostrar mensajes
    function mostrarMensaje(texto, tipo = 'error') {
      const mensajeDiv = document.getElementById('mensaje-estado');
      mensajeDiv.className = `mb-4 p-3 rounded-md ${
        tipo === 'success' ? 'bg-green-100 text-green-800 border border-green-200' : 
        tipo === 'warning' ? 'bg-yellow-100 text-yellow-800 border border-yellow-200' :
        'bg-red-100 text-red-800 border border-red-200'
      }`;
      mensajeDiv.textContent = texto;
      mensajeDiv.classList.remove('hidden');
      
      // Auto-ocultar después de 5 segundos
      setTimeout(() => {
        mensajeDiv.classList.add('hidden');
      }, 5000);
    }

    // Función para cambiar estado del botón
    function cambiarEstadoBoton(cargando) {
      const btnLogin = document.getElementById('btn-login') as HTMLButtonElement;
      const textoBoton = document.getElementById('texto-boton');
      const spinnerBoton = document.getElementById('spinner-boton');
      
      isLoading = cargando;
      (btnLogin.disabled) = cargando;
      
      if (cargando) {
        textoBoton.classList.add('hidden');
        spinnerBoton.classList.remove('hidden');
        btnLogin.classList.add('opacity-75', 'cursor-not-allowed');
      } else {
        textoBoton.classList.remove('hidden');
        spinnerBoton.classList.add('hidden');
        btnLogin.classList.remove('opacity-75', 'cursor-not-allowed');
      }
    }

    // Función para guardar datos de usuario
    function guardarSesion(userData) {
      // Guardamos en memoria/sessionStorage simulado
      window.currentUser = userData;
      
      // También podemos usar localStorage si es necesario
      localStorage.setItem('newsai_user', JSON.stringify(userData));
      localStorage.setItem('newsai_session', 'active');
    }

    // Función principal de login
    async function realizarLogin(loginData) {
      try {
        cambiarEstadoBoton(true);
        
        const response = await fetch('https://localhost:7298/api/auth/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(loginData)
        });

        const data = await response.json();
        
        if (data.success) {
          mostrarMensaje('¡Login correcto! Redirigiendo...', 'success');
          guardarSesion(data.user);
          
          // Redirigir después de 1 segundo
          setTimeout(() => {
            window.location.href = '/';
          }, 1000);
          
        } else {
          mostrarMensaje(data.message || 'Error al iniciar sesión');
        }
        
      } catch (error) {
        console.error('Error de conexión:', error);
        mostrarMensaje('Error de conexión. Verifica que el servidor esté funcionando.');
      } finally {
        cambiarEstadoBoton(false);
      }
    }

    // Event listener para el formulario
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('form-login') as HTMLFormElement;
      
      // Verificar si ya está logueado el usuario y redirigir
      if (window.authManager?.redirectIfAuthenticated()) {
        return; // Si ya está logueado, se redirige al home
      }
      
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (isLoading) return;
        
        const formData = new FormData(form);
        const loginData = {
          login: (formData.get('login') as string).trim(),
          password: (formData.get('password') as string).trim()
        };
        
        // Validaciones simples
        if (!loginData.login || !loginData.password) {
          mostrarMensaje('Por favor completa todos los campos');
          return;
        }
        
        if (loginData.login.length < 3) {
          mostrarMensaje('El usuario debe tener al menos 3 caracteres');
          return;
        }
        
        if (loginData.password.length < 4) {
          mostrarMensaje('La contraseña debe tener al menos 4 caracteres');
          return;
        }
        
        await realizarLogin(loginData);
      });

      // Focus automático en el campo login
      document.getElementById('login').focus();
    });
  </script>
</BaseLayout>