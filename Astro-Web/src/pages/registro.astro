---
import BaseLayout from '../layouts/BaseLayout.astro';
export const prerender = false;
---

<BaseLayout title="Registro - NewsAI">
  <section class="min-h-screen flex items-center justify-center bg-gray-50 px-6">
    <div class="max-w-md w-full">
      
      <!-- Header -->
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">Únete a NewsAI</h1>
        <p class="text-gray-600">Crea tu cuenta y empieza a recibir resúmenes personalizados</p>
      </div>

      <!-- Formulario de Registro -->
      <div class="bg-white border border-gray-200 shadow-lg rounded-lg p-8">
        
        <!-- Mensajes de estado -->
        <div id="mensaje-estado" class="hidden mb-4 p-3 rounded-md"></div>
        
        <form id="form-registro" class="space-y-6">
          
          <!-- Campo Nombre -->
          <div>
            <label for="nombre" class="block text-sm font-medium text-gray-700 mb-2">
              Nombre completo
            </label>
            <input 
              type="text" 
              id="nombre"
              name="nombre" 
              placeholder="Tu nombre completo"
              class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <!-- Campo Email -->
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
              Correo electrónico
            </label>
            <input 
              type="email" 
              id="email"
              name="email" 
              placeholder="tu@email.com"
              class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <!-- Campo Usuario -->
          <div>
            <label for="login" class="block text-sm font-medium text-gray-700 mb-2">
              Nombre de usuario
            </label>
            <input 
              type="text" 
              id="login"
              name="login" 
              placeholder="usuario123"
              class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
            <p class="text-xs text-gray-500 mt-1">Mínimo 3 caracteres</p>
          </div>

          <!-- Campo Password -->
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700 mb-2">
              Contraseña
            </label>
            <input 
              type="password" 
              id="password"
              name="password" 
              placeholder="Mínimo 6 caracteres"
              class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <!-- Campo Confirmar Password -->
          <div>
            <label for="password-confirm" class="block text-sm font-medium text-gray-700 mb-2">
              Confirmar contraseña
            </label>
            <input 
              type="password" 
              id="password-confirm"
              name="password-confirm" 
              placeholder="Repite tu contraseña"
              class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <!-- Términos y condiciones -->
          <div class="flex items-start">
            <input 
              type="checkbox" 
              id="terminos" 
              name="terminos" 
              class="w-4 h-4 text-blue-600 bg-white border-gray-300 rounded focus:ring-blue-500 focus:ring-2 mt-1"
              required
            />
            <label for="terminos" class="ml-2 text-sm text-gray-600">
              Acepto los <a href="#" class="text-blue-600 hover:text-blue-700">términos y condiciones</a> 
              y la <a href="#" class="text-blue-600 hover:text-blue-700">política de privacidad</a>
            </label>
          </div>

          <!-- Botón Submit -->
          <button 
            type="submit" 
            id="btn-registro"
            class="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium"
          >
            <span id="texto-boton">Crear Cuenta</span>
            <span id="spinner-boton" class="hidden">
              <svg class="animate-spin inline w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Creando cuenta...
            </span>
          </button>

        </form>

        <!-- Link al login -->
        <div class="mt-6 text-center">
          <p class="text-sm text-gray-600">
            ¿Ya tienes cuenta? 
            <a href="/login" class="text-blue-600 hover:text-blue-700 font-medium">
              Inicia sesión aquí
            </a>
          </p>
        </div>

      </div>

      <!-- Info adicional -->
      <div class="mt-6 text-center">
        <p class="text-xs text-gray-500">
          Al registrarte, podrás crear configuraciones personalizadas y recibir resúmenes automáticos
        </p>
      </div>

    </div>
  </section>

  <script>
    // Estado de la aplicación
    let isLoading = false;

    // Función para mostrar mensajes
    function mostrarMensaje(texto, tipo = 'error') {
      const mensajeDiv = document.getElementById('mensaje-estado');
      mensajeDiv.className = `mb-4 p-3 rounded-md ${
        tipo === 'success' ? 'bg-green-100 text-green-800 border border-green-200' : 
        tipo === 'warning' ? 'bg-yellow-100 text-yellow-800 border border-yellow-200' :
        'bg-red-100 text-red-800 border border-red-200'
      }`;
      mensajeDiv.textContent = texto;
      mensajeDiv.classList.remove('hidden');
      
      // Auto-ocultar después de 5 segundos
      setTimeout(() => {
        mensajeDiv.classList.add('hidden');
      }, 5000);
    }

    // Función para cambiar estado del botón
    function cambiarEstadoBoton(cargando) {
      const btnRegistro = document.getElementById('btn-registro') as HTMLButtonElement;
      const textoBoton = document.getElementById('texto-boton');
      const spinnerBoton = document.getElementById('spinner-boton');
      
      isLoading = cargando;
      btnRegistro.disabled = cargando;
      
      if (cargando) {
        textoBoton.classList.add('hidden');
        spinnerBoton.classList.remove('hidden');
        btnRegistro.classList.add('opacity-75', 'cursor-not-allowed');
      } else {
        textoBoton.classList.remove('hidden');
        spinnerBoton.classList.add('hidden');
        btnRegistro.classList.remove('opacity-75', 'cursor-not-allowed');
      }
    }

    // Función principal de registro
    async function realizarRegistro(datosRegistro) {
      try {
        cambiarEstadoBoton(true);
        
        const response = await fetch('https://localhost:7298/api/auth/registro', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(datosRegistro)
        });

        const data = await response.json();
        
        if (data.success) {
          mostrarMensaje('¡Cuenta creada exitosamente! Redirigiendo al login...', 'success');
          
          // Redirigir al login después de 2 segundos
          setTimeout(() => {
            window.location.href = '/login';
          }, 2000);
          
        } else {
          mostrarMensaje(data.message || 'Error al crear la cuenta');
        }
        
      } catch (error) {
        console.error('Error de conexión:', error);
        mostrarMensaje('Error de conexión. Verifica que el servidor esté funcionando.');
      } finally {
        cambiarEstadoBoton(false);
      }
    }

    // Validaciones
    function validarFormulario(formData) {
      const nombre = formData.get('nombre').trim();
      const email = formData.get('email').trim();
      const login = formData.get('login').trim();
      const password = formData.get('password');
      const passwordConfirm = formData.get('password-confirm');

      if (!nombre || nombre.length < 2) {
        mostrarMensaje('El nombre debe tener al menos 2 caracteres');
        return false;
      }

      if (!email) {
        mostrarMensaje('El email es requerido');
        return false;
      }

      // Validación básica de email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        mostrarMensaje('Introduce un email válido');
        return false;
      }

      if (!login || login.length < 3) {
        mostrarMensaje('El nombre de usuario debe tener al menos 3 caracteres');
        return false;
      }

      if (!password || password.length < 6) {
        mostrarMensaje('La contraseña debe tener al menos 6 caracteres');
        return false;
      }

      if (password !== passwordConfirm) {
        mostrarMensaje('Las contraseñas no coinciden');
        return false;
      }

      return true;
    }

    // Event listener para el formulario
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('form-registro') as HTMLFormElement;
      
      //  Verificar si ya está logueado y redirigir (CORREGIDO)
      setTimeout(() => {
        // Esperamos un poco más para asegurar que el AuthManager esté completamente cargado
        if (window.authManager?.redirectIfAuthenticated()) {
          return; // Si ya está logueado, se redirige al home
        }
      }, 500); // Esperamos 500ms para que el AuthManager esté listo
      
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (isLoading) return;
        
        const formData = new FormData(form);
        
        // Validaciones
        if (!validarFormulario(formData)) {
          return;
        }

        // Verificar términos y condiciones
        if (!formData.get('terminos')) {
          mostrarMensaje('Debes aceptar los términos y condiciones');
          return;
        }
        
        const datosRegistro = {
          nombre: formData.get('nombre').toString().trim(),
          email: formData.get('email').toString().trim(),
          login: formData.get('login').toString().trim(),
          password: formData.get('password')
        };
        
        await realizarRegistro(datosRegistro);
      });

      // Focus automático en el campo nombre
      document.getElementById('nombre').focus();
    });
  </script>
</BaseLayout>